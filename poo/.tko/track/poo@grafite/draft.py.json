{
    "patches": [
        {
            "label": "2025-10-27_23-13-41",
            "content": "@@ -1,2885 +0,0 @@\n-class Lead:%0A    def __init__(self, thickness: float, hardness: str, size: int):%0A        self.thickness = thickness%0A        self.hardness = hardness%0A        self.size = size%0A%0A    def usagePerSheet(self):%0A        if self.hardness == %22HB%22:%0A            return 1%0A        elif self.hardness == %222B%22:%0A            return 2%0A        elif self.hardness == %224B%22:%0A            return 4%0A        elif self.hardness == %226B%22:%0A            return 6%0A        return 0%0A%0A    def __str__(self):%0A        return f%22%5B%7Bself.thickness%7D:%7Bself.hardness%7D:%7Bself.size%7D%5D%22%0A%0A%0Aclass Pencil:%0A    def __init__(self, thickness: float):%0A        self.thickness = thickness%0A        self.lead = None%0A%0A    def insert(self, lead: Lead):%0A        if self.lead is not None:%0A            print(%22fail: ja existe grafite%22)%0A            return%0A        if lead.thickness != self.thickness:%0A            print(%22fail: calibre incompativel%22)%0A            return%0A        self.lead = lead%0A%0A    def remove(self):%0A        if self.lead is None:%0A            print(%22fail: nao existe grafite%22)%0A            return%0A        self.lead = None%0A%0A    def writePage(self):%0A        if self.lead is None:%0A            print(%22fail: nao existe grafite%22)%0A            return%0A        if self.lead.size %3C= 10:%0A            print(%22fail: tamanho insuficiente%22)%0A            return%0A%0A        gasto = self.lead.usagePerSheet()%0A        if self.lead.size - gasto %3C 10:%0A            print(%22fail: folha incompleta%22)%0A            self.lead.size = 10%0A        else:%0A            self.lead.size -= gasto%0A%0A    def __str__(self):%0A        grafite_str = %22null%22 if self.lead is None else str(self.lead)%0A        return f%22calibre: %7Bself.thickness%7D, grafite: %7Bgrafite_str%7D%22%0A%0A%0Adef main():%0A    pencil = None%0A    while True:%0A        try:%0A            line = input().strip()%0A            if not line:%0A                continue%0A            print(f%22$%7Bline%7D%22)%0A            parts = line.split()%0A            cmd = parts%5B0%5D%0A%0A            if cmd == %22end%22:%0A                break%0A            elif cmd == %22init%22:%0A                pencil = Pencil(float(parts%5B1%5D))%0A            elif cmd == %22show%22:%0A                if pencil is None:%0A                    print(%22fail: nenhum lapis%22)%0A                else:%0A                    print(pencil)%0A            elif cmd == %22insert%22:%0A                if pencil is None:%0A                    print(%22fail: nenhum lapis%22)%0A                else:%0A                    lead = Lead(float(parts%5B1%5D), parts%5B2%5D, int(parts%5B3%5D))%0A                    pencil.insert(lead)%0A            elif cmd == %22remove%22:%0A                if pencil is None:%0A                    print(%22fail: nenhum lapis%22)%0A                else:%0A                    pencil.remove()%0A            elif cmd == %22write%22:%0A                if pencil is None:%0A                    print(%22fail: nenhum lapis%22)%0A                else:%0A                    pencil.writePage()%0A        except EOFError:%0A            break%0A%0A%0Aif __name__ == %22__main__%22:%0A    main()\n",
            "lines": "0"
        },
        {
            "label": "2025-10-27_23-26-32",
            "content": "class Lead:\n    def __init__(self, thickness: float, hardness: str, size: int):\n        self.thickness = thickness\n        self.hardness = hardness\n        self.size = size\n\n    def usagePerSheet(self):\n        if self.hardness == \"HB\":\n            return 1\n        elif self.hardness == \"2B\":\n            return 2\n        elif self.hardness == \"4B\":\n            return 4\n        elif self.hardness == \"6B\":\n            return 6\n        return 0\n\n    def __str__(self):\n        return f\"[{self.thickness}:{self.hardness}:{self.size}]\"\n\n\nclass Pencil:\n    def __init__(self, thickness: float):\n        self.thickness = thickness\n        self.lead = None\n\n    def insert(self, lead: Lead):\n        if self.lead is not None:\n            print(\"fail: ja existe grafite\")\n            return\n        if lead.thickness != self.thickness:\n            print(\"fail: calibre incompativel\")\n            return\n        self.lead = lead\n\n    def remove(self):\n        if self.lead is None:\n            print(\"fail: nao existe grafite\")\n            return\n        self.lead = None\n\n    def writePage(self):\n        if self.lead is None:\n            print(\"fail: nao existe grafite\")\n            return\n        if self.lead.size <= 10:\n            print(\"fail: tamanho insuficiente\")\n            return\n\n        gasto = self.lead.usagePerSheet()\n        if self.lead.size - gasto < 10:\n            print(\"fail: folha incompleta\")\n            self.lead.size = 10\n        else:\n            self.lead.size -= gasto\n\n    def __str__(self):\n        grafite_str = \"null\" if self.lead is None else str(self.lead)\n        return f\"calibre: {self.thickness}, grafite: {grafite_str}\"\n\n\ndef main():\n    pencil = None\n    while True:\n        try:\n            line = input().strip()\n            if not line:\n                continue\n            print(f\"${line}\")\n            parts = line.split()\n            cmd = parts[0]\n\n            if cmd == \"end\":\n                break\n            elif cmd == \"init\":\n                pencil = Pencil(float(parts[1]))\n            elif cmd == \"show\":\n                if pencil is None:\n                    print(\"fail: nenhum lapis\")\n                else:\n                    print(pencil)\n            elif cmd == \"insert\":\n                if pencil is None:\n                    print(\"fail: nenhum lapis\")\n                else:\n                    lead = Lead(float(parts[1]), parts[2], int(parts[3]))\n                    pencil.insert(lead)\n            elif cmd == \"remove\":\n                if pencil is None:\n                    print(\"fail: nenhum lapis\")\n                else:\n                    pencil.remove()\n            elif cmd == \"write\":\n                if pencil is None:\n                    print(\"fail: nenhum lapis\")\n                else:\n                    pencil.writePage()\n        except EOFError:\n            break\n\n\nif __name__ == \"__main__\":\n    main()",
            "lines": "103"
        }
    ]
}